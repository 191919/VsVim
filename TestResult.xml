<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Users\jaredpar\VsVim\VsVim.nunit" total="133" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2009-12-16" time="09:11:05">
  <environment nunit-version="2.5.3.9345" clr-version="4.0.21006.1" os-version="Microsoft Windows NT 6.1.7600.0" platform="Win32NT" cwd="C:\Program Files (x86)\NUnit 2.5.3\bin\net-2.0" machine-name="JAREDPAR14" user="jaredpar" user-domain="REDMOND" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite name="C:\Users\jaredpar\VsVim\VsVim.nunit" executed="True" success="True" time="6.797" asserts="0">
    <results>
      <test-suite name="C:\Users\jaredpar\VsVim\VimCoreTest\bin\Debug\VimCoreTest.dll" executed="True" success="True" time="6.779" asserts="0">
        <properties>
          <property name="APARTMENT_STATE" value="STA" />
        </properties>
        <results>
          <test-suite name="VimCoreTest" executed="True" success="True" time="6.756" asserts="0">
            <results>
              <test-suite name="NormalModeTest" executed="True" success="True" time="6.754" asserts="0">
                <results>
                  <test-case name="VimCoreTest.NormalModeTest.BadMotion1" description="Typing in invalid motion should produce a warning" executed="True" success="True" time="5.065" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.BadMotion2" description="Typing in invalid motion should produce a warning" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.BadMotion3" description="Enter must cancel an invalid motion" executed="True" success="True" time="0.005" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.BadMotion4" description="Canceled motion should reset the status" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.BadMotion5" description="Completed motion should reset the status" executed="True" success="True" time="0.073" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.CanProcess1" description="Can process basic commands" executed="True" success="True" time="0.005" asserts="4" />
                  <test-case name="VimCoreTest.NormalModeTest.CanProcess2" description="Cannot process invalid commands" executed="True" success="True" time="0.002" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.CanProcess3" description="Must be able to process numbers" executed="True" success="True" time="0.005" asserts="8" />
                  <test-case name="VimCoreTest.NormalModeTest.CanProcess4" description="When in a need more state, process everything" executed="True" success="True" time="0.017" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Delete_dd_1" description="Make sure a dd is a linewise action" executed="True" success="True" time="0.194" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Delete_dd_2" description="Make sure that it deletes the entire line regardless of where the caret is" executed="True" success="True" time="0.004" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Delete_dw_1" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Delete_dw_2" description="Delete at the end of the line shouldn't delete newline" executed="True" success="True" time="0.027" asserts="4" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_2x" executed="True" success="True" time="0.125" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_2X_1" executed="True" success="True" time="0.008" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_2X_2" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_o_1" executed="True" success="True" time="0.025" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_O_1" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_o_2" description="Use o at end of buffer" executed="True" success="True" time="0.013" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_O_2" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_o_3" description="Make sure o will indent if the previous line was indented" executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_1" executed="True" success="True" time="0.048" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_2" executed="True" success="True" time="0.005" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_3" executed="True" success="True" time="0.006" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_5" description="block caret should be hidden for the duration of the r command" executed="True" success="True" time="0.005" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_x_1" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_X_1" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_x_2" executed="True" success="True" time="0.008" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_X_2" description="Don't delete past the current line" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Enter1" description="Enter should move down on line" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Enter2" description="Enter at end of file should beep " executed="True" success="True" time="0.004" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.EnterProcessing" description="Let enter go straight back to the editor in the default case" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.GoToDefinition1" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.GoToDefinition2" description="When it fails, the status should be updated" executed="True" success="True" time="0.004" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.GoToDefinition3" executed="True" success="True" time="0.025" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Join1" executed="True" success="True" time="0.012" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Join2" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Join3" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Join4" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.JumpToMark1" executed="True" success="True" time="0.003" asserts="4" />
                  <test-case name="VimCoreTest.NormalModeTest.JumpToMark2" executed="True" success="True" time="0.017" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.JumpToMark3" executed="True" success="True" time="0.007" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Mark1" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Mark2" description="Once we are in mark mode we can process anything" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Mark3" executed="True" success="True" time="0.009" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Mark4" description="Bad mark should beep" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ModeKindTest" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Motion_2l" executed="True" success="True" time="0.013" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Motion_50l" description="Don't crash moving off the end of the buffer" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Motion_l" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_h" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_h2" description="Make sure that we clear the selection on a motion" executed="True" success="True" time="0.050" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_j" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_k" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_l" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_l2" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.NextWord1" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.NextWord2" description="No matches should have no effect" executed="True" success="True" time="0.026" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.NextWord3" executed="True" success="True" time="0.028" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.NextWord4" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.NextWord5" description="Don't start on position 0" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.OnLeave1" description="OnLeave should kill the block caret" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_2p" executed="True" success="True" time="0.006" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_2P" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_gp_1" executed="True" success="True" time="0.003" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_gP_1" executed="True" success="True" time="0.003" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_gp_2" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_gP_2" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_p" executed="True" success="True" time="0.003" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_P" executed="True" success="True" time="0.003" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_p_2" description="Paste from a non-default register" executed="True" success="True" time="0.003" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_p_3" description="Pasting a linewise motion should occur on the next line" executed="True" success="True" time="0.007" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.PreviousWord1" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.PreviousWord2" executed="True" success="True" time="0.025" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.PreviousWord3" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.PreviousWord4" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Register1" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Regression_DownPastBufferEnd" description="j past the end of the buffer" executed="True" success="True" time="0.005" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Regression_InsertMode" description="Don't re-enter insert mode on every keystroke once you've left" executed="True" success="True" time="0.003" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Scroll_zb" executed="True" success="True" time="0.008" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Scroll_zDash" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Scroll_zEnter" executed="True" success="True" time="0.004" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Scroll_zInvalid" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Scroll_zPeriod" executed="True" success="True" time="0.009" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Scroll_zt" executed="True" success="True" time="0.003" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Scroll_zz" executed="True" success="True" time="0.003" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.ScrollDown1" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ScrollUp1" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ScrollUp2" description="Don't break at line 0" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Search1" executed="True" success="True" time="0.218" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Search2" executed="True" success="True" time="0.004" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Search3" description="Make sure it matches the first occurance" executed="True" success="True" time="0.004" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Search4" description="No match should select nothing" executed="True" success="True" time="0.004" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Search5" description="A partial match followed by a bad match should go back to start" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Search6" description="Search accross lines" executed="True" success="True" time="0.020" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchBackspace1" executed="True" success="True" time="0.005" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchBackspace2" executed="True" success="True" time="0.004" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchBackspace3" description="Completely exit from the search" executed="True" success="True" time="0.004" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNext1" executed="True" success="True" time="0.073" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNext2" description="Don't start at current position" executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNext3" description="Don't skip the current word just the current letter" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNext4" description="Counted next" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNext5" description="Make sure enter sets the search" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNextReverse1" executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchReverse1" executed="True" success="True" time="0.004" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchReverse2" description="Change nothing on invalid searh" executed="True" success="True" time="0.006" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchStatus1" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchStatus2" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftLeft1" description="Don't eat extra whitespace" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftLeft2" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftLeft3" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftLeft4" description="With a count" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftLeft5" description="Make sure a &lt;&lt; doesn't shift more than 1 line" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftRight1" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftRight2" description="With a count" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftRight3" description="With a motion" executed="True" success="True" time="0.006" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftRight4" description="Make sure a normal &gt;&gt; doesn't shift 2 lines" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Undo1" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Undo2" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_2yw" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_3yw" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_Y_1" executed="True" success="True" time="0.007" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_Y_2" executed="True" success="True" time="0.013" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_Y_3" executed="True" success="True" time="0.011" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_y2w" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yaw" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yaw_2" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yw" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yw_2" description="Yanks in the middle of the word should only get a partial" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yw_3" description="Yank word should go to the start of the next word including spaces" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yw_4" description="Non-default register" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yy_1" description="A yy should grab the end of line including line break information" executed="True" success="True" time="0.003" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yy_2" description="yy should yank the entire line even if the cursor is not at the start" executed="True" success="True" time="0.003" asserts="1" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>