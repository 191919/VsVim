<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Users\jaredpar\VsVim\VsVim.nunit" total="425" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2009-12-14" time="14:51:18">
  <environment nunit-version="2.5.3.9345" clr-version="4.0.21006.1" os-version="Microsoft Windows NT 6.1.7600.0" platform="Win32NT" cwd="C:\Program Files (x86)\NUnit 2.5.3\bin\net-2.0" machine-name="JAREDPAR02" user="jaredpar" user-domain="REDMOND" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite name="C:\Users\jaredpar\VsVim\VsVim.nunit" executed="True" success="True" time="21.472" asserts="0">
    <results>
      <test-suite name="C:\Users\jaredpar\VsVim\VimCoreTest\bin\Debug\VimCoreTest.dll" executed="True" success="True" time="21.353" asserts="0">
        <properties>
          <property name="APARTMENT_STATE" value="STA" />
        </properties>
        <results>
          <test-suite name="VimCoreTest" executed="True" success="True" time="21.320" asserts="0">
            <results>
              <test-suite name="BufferUtilTest" executed="True" success="True" time="1.081" asserts="0">
                <results>
                  <test-case name="VimCoreTest.BufferUtilTest.AddLineAbove1" executed="True" success="True" time="0.947" asserts="3" />
                  <test-case name="VimCoreTest.BufferUtilTest.AddLineAbove2" executed="True" success="True" time="0.006" asserts="3" />
                  <test-case name="VimCoreTest.BufferUtilTest.AddLineBelow" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.BufferUtilTest.AddLineBelow2" description="New line at end of buffer" executed="True" success="True" time="0.011" asserts="1" />
                  <test-case name="VimCoreTest.BufferUtilTest.AddLineBelow3" description="Make sure the new is actually a newline" executed="True" success="True" time="0.004" asserts="2" />
                  <test-case name="VimCoreTest.BufferUtilTest.AddLineBelow4" description="Make sure line inserted in the middle has correct text" executed="True" success="True" time="0.019" asserts="2" />
                  <test-case name="VimCoreTest.BufferUtilTest.AddLineBelow5" executed="True" success="True" time="0.011" asserts="12" />
                  <test-case name="VimCoreTest.BufferUtilTest.ShiftLeft1" description="Only shift whitespace" executed="True" success="True" time="0.022" asserts="1" />
                  <test-case name="VimCoreTest.BufferUtilTest.ShiftLeft2" description="Don't puke on an empty line" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.BufferUtilTest.ShiftLeft3" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.BufferUtilTest.ShiftLeft4" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.BufferUtilTest.ShiftRight1" executed="True" success="True" time="0.008" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="Command_UtilTest" executed="True" success="True" time="10.079" asserts="0">
                <results>
                  <test-case name="VimCoreTest.Command_UtilTest.Join1" executed="True" success="True" time="9.908" asserts="2" />
                  <test-case name="VimCoreTest.Command_UtilTest.Join2" executed="True" success="True" time="0.111" asserts="3" />
                  <test-case name="VimCoreTest.Command_UtilTest.Put1" executed="True" success="True" time="0.023" asserts="1" />
                  <test-case name="VimCoreTest.Command_UtilTest.Put2" executed="True" success="True" time="0.016" asserts="3" />
                </results>
              </test-suite>
              <test-suite name="CommandModeIntegrationTest" executed="True" success="True" time="1.757" asserts="0">
                <results>
                  <test-case name="VimCoreTest.CommandModeIntegrationTest.JumpLine1" executed="True" success="True" time="1.332" asserts="2" />
                  <test-case name="VimCoreTest.CommandModeIntegrationTest.JumpLine2" executed="True" success="True" time="0.014" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeIntegrationTest.JumpLine3" executed="True" success="True" time="0.291" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeIntegrationTest.JumpLineLast" executed="True" success="True" time="0.020" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeIntegrationTest.OpenFile1" executed="True" success="True" time="0.036" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeIntegrationTest.SwitchOut" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeIntegrationTest.SwitchTo" executed="True" success="True" time="0.004" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="CommandModeTest" executed="True" success="True" time="1.220" asserts="0">
                <properties>
                  <property name="APARTMENT_STATE" value="STA" />
                </properties>
                <results>
                  <test-case name="VimCoreTest.CommandModeTest.Delete1" executed="True" success="True" time="0.718" asserts="2" />
                  <test-case name="VimCoreTest.CommandModeTest.Delete2" executed="True" success="True" time="0.131" asserts="2" />
                  <test-case name="VimCoreTest.CommandModeTest.Delete3" executed="True" success="True" time="0.010" asserts="3" />
                  <test-case name="VimCoreTest.CommandModeTest.Jump1" executed="True" success="True" time="0.012" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.Jump2" executed="True" success="True" time="0.010" asserts="2" />
                  <test-case name="VimCoreTest.CommandModeTest.Jump3" executed="True" success="True" time="0.012" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.Put1" executed="True" success="True" time="0.026" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.Put2" executed="True" success="True" time="0.009" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.ShiftLeft1" executed="True" success="True" time="0.030" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.ShiftLeft2" executed="True" success="True" time="0.044" asserts="2" />
                  <test-case name="VimCoreTest.CommandModeTest.ShiftLeft3" executed="True" success="True" time="0.016" asserts="2" />
                  <test-case name="VimCoreTest.CommandModeTest.ShiftRight1" executed="True" success="True" time="0.012" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.ShiftRight2" executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.CommandModeTest.ShiftRight3" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.CommandModeTest.StatusOnColon1" description="Entering command mode should update the status" executed="True" success="True" time="0.026" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.StatusOnLeave" description="When leaving command mode we should not clear the status because it will remove error messages" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.StatusOnProcess" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.Yank1" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.Yank2" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.Yank3" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.CommandModeTest.Yank4" executed="True" success="True" time="0.006" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="CountCaptureTest" executed="True" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="VimCoreTest.CountCaptureTest.Simple1" executed="True" success="True" time="0.004" asserts="4" />
                  <test-case name="VimCoreTest.CountCaptureTest.Simple2" executed="True" success="True" time="0.002" asserts="4" />
                  <test-case name="VimCoreTest.CountCaptureTest.Simple3" executed="True" success="True" time="0.002" asserts="5" />
                </results>
              </test-suite>
              <test-suite name="IncrementalSearchTest" executed="True" success="True" time="0.475" asserts="0">
                <results>
                  <test-case name="VimCoreTest.IncrementalSearchTest.Constructor1" description="Bad regex should not cause a crash" executed="True" success="True" time="0.064" asserts="1" />
                  <test-case name="VimCoreTest.IncrementalSearchTest.Previous1" executed="True" success="True" time="0.287" asserts="2" />
                  <test-case name="VimCoreTest.IncrementalSearchTest.Previous2" description="In the middle of the word should match the word in a previous searh" executed="True" success="True" time="0.011" asserts="2" />
                  <test-case name="VimCoreTest.IncrementalSearchTest.Search1" executed="True" success="True" time="0.020" asserts="2" />
                  <test-case name="VimCoreTest.IncrementalSearchTest.Search2" executed="True" success="True" time="0.062" asserts="1" />
                  <test-case name="VimCoreTest.IncrementalSearchTest.Search3" executed="True" success="True" time="0.018" asserts="2" />
                  <test-case name="VimCoreTest.IncrementalSearchTest.Search4" description="Search with a bad regex should just produce a bad result" executed="True" success="True" time="0.003" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="InputUtilTest" executed="True" success="True" time="0.050" asserts="0">
                <results>
                  <test-case name="VimCoreTest.InputUtilTest.CharBothway" executed="True" success="True" time="0.004" asserts="76" />
                  <test-case name="VimCoreTest.InputUtilTest.CharToKeyTest" executed="True" success="True" time="0.033" asserts="2" />
                  <test-case name="VimCoreTest.InputUtilTest.KeyAndModifierToKeyInput1" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.InputUtilTest.KeyAndModifierToKeyInput2" executed="True" success="True" time="0.000" asserts="3" />
                </results>
              </test-suite>
              <test-suite name="InsertModeTest" executed="True" success="True" time="0.195" asserts="0">
                <results>
                  <test-case name="VimCoreTest.InsertModeTest.CanProcess1" description="Must process escape" executed="True" success="True" time="0.084" asserts="1" />
                  <test-case name="VimCoreTest.InsertModeTest.CanProcess2" description="Do not processing anything other than Escape" executed="True" success="True" time="0.013" asserts="2" />
                  <test-case name="VimCoreTest.InsertModeTest.Process1" description="Process but and handle Escape, otherwise it will end up as a char in the buffer" executed="True" success="True" time="0.014" asserts="1" />
                  <test-case name="VimCoreTest.InsertModeTest.ShiftLeft1" executed="True" success="True" time="0.013" asserts="2" />
                  <test-case name="VimCoreTest.InsertModeTest.ShiftLeft2" description="Too short of a shift width" executed="True" success="True" time="0.030" asserts="2" />
                  <test-case name="VimCoreTest.InsertModeTest.ShiftLeft3" description="Another too short of a shift" executed="True" success="True" time="0.013" asserts="2" />
                  <test-case name="VimCoreTest.InsertModeTest.ShiftLeft4" executed="True" success="True" time="0.014" asserts="2" />
                </results>
              </test-suite>
              <test-suite name="IntegrationTests" executed="True" success="True" time="1.473" asserts="0">
                <results>
                  <test-case name="VimCoreTest.IntegrationTests.Next1" executed="True" success="True" time="0.812" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.Next3" executed="True" success="True" time="0.016" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.Next4" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.NextWordUnderCursor1" executed="True" success="True" time="0.015" asserts="2" />
                  <test-case name="VimCoreTest.IntegrationTests.NextWordUnderCursor2" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.IntegrationTests.NormalMode1" executed="True" success="True" time="0.009" asserts="3" />
                  <test-case name="VimCoreTest.IntegrationTests.NormalMode2" executed="True" success="True" time="0.022" asserts="3" />
                  <test-case name="VimCoreTest.IntegrationTests.NormalMode3" executed="True" success="True" time="0.027" asserts="3" />
                  <test-case name="VimCoreTest.IntegrationTests.NormalModeEnter1" executed="True" success="True" time="0.010" asserts="3" />
                  <test-case name="VimCoreTest.IntegrationTests.NormalModeEscape1" executed="True" success="True" time="0.013" asserts="3" />
                  <test-case name="VimCoreTest.IntegrationTests.Sanity" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_2P_1" executed="True" success="True" time="0.025" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_2yw_1" executed="True" success="True" time="0.019" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_A_1" executed="True" success="True" time="0.012" asserts="2" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_dd_1" executed="True" success="True" time="0.022" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_dw_1" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_dw_2" executed="True" success="True" time="0.014" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_h_1" executed="True" success="True" time="0.027" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_h_2" executed="True" success="True" time="0.009" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_i_1" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_l_1" executed="True" success="True" time="0.024" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_o_1" executed="True" success="True" time="0.045" asserts="4" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_o_2" description="Use o at end of buffer" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_o_3" description="Make sure o will indent if the previous line was indented" executed="True" success="True" time="0.014" asserts="2" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_p_1" executed="True" success="True" time="0.014" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_P_1" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_Search_1" executed="True" success="True" time="0.023" asserts="3" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_w_1" executed="True" success="True" time="0.023" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_w_2" executed="True" success="True" time="0.009" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_x_1" executed="True" success="True" time="0.020" asserts="2" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_y2w_1" executed="True" success="True" time="0.016" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_yw_1" executed="True" success="True" time="0.016" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_yw_2" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_yy_1" executed="True" success="True" time="0.021" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_yy_2" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.IntegrationTests.TestChar_yy_3" executed="True" success="True" time="0.021" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="KeyInputTest" executed="True" success="True" time="0.059" asserts="0">
                <results>
                  <test-case name="VimCoreTest.KeyInputTest.CompareTo1" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.KeyInputTest.Equality1" executed="True" success="True" time="0.006" asserts="4" />
                  <test-case name="VimCoreTest.KeyInputTest.Equality2" description="Boundary condition" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.KeyInputTest.IsDigit1" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.KeyInputTest.IsDigit2" executed="True" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="MarkMapTest" executed="True" success="True" time="0.384" asserts="0">
                <results>
                  <test-case name="VimCoreTest.MarkMapTest.DeleteAllMarks" description="Should work on an empty map" executed="True" success="True" time="0.082" asserts="0" />
                  <test-case name="VimCoreTest.MarkMapTest.DeleteAllMarks2" executed="True" success="True" time="0.071" asserts="1" />
                  <test-case name="VimCoreTest.MarkMapTest.DeleteMark1" description="Deleting a non-existant mark is OK" executed="True" success="True" time="0.039" asserts="1" />
                  <test-case name="VimCoreTest.MarkMapTest.DeleteMark2" description="Simple Mark deletion" executed="True" success="True" time="0.005" asserts="2" />
                  <test-case name="VimCoreTest.MarkMapTest.DeleteMark3" description="Double deletion of a mark" executed="True" success="True" time="0.002" asserts="4" />
                  <test-case name="VimCoreTest.MarkMapTest.DeleteMark4" description="Deleting a mark in one buffer shouldn't affect another" executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.MarkMapTest.GetLocalMark1" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.MarkMapTest.IsLocalMark1" executed="True" success="True" time="0.001" asserts="3" />
                  <test-case name="VimCoreTest.MarkMapTest.IsLocalMark2" executed="True" success="True" time="0.001" asserts="3" />
                  <test-case name="VimCoreTest.MarkMapTest.SetMark1" executed="True" success="True" time="0.003" asserts="3" />
                  <test-case name="VimCoreTest.MarkMapTest.TrackDeleteLine1" executed="True" success="True" time="0.072" asserts="1" />
                  <test-case name="VimCoreTest.MarkMapTest.TrackDeleteLine2" description="Deletion of a previous line shouldn't affect the mark" executed="True" success="True" time="0.025" asserts="2" />
                  <test-case name="VimCoreTest.MarkMapTest.TrackDeleteLine3" description="Deleting a line in the middle of the buffer" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.MarkMapTest.TrackReplace1" description="Simple insertion shouldn't invalidate the mark" executed="True" success="True" time="0.004" asserts="2" />
                  <test-case name="VimCoreTest.MarkMapTest.TrackReplace2" description="Insertions elsewhere on the line should not affect the mark" executed="True" success="True" time="0.002" asserts="2" />
                  <test-case name="VimCoreTest.MarkMapTest.TrackReplace3" description="Shrinking the line should just return the position in Virtual Space" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.MarkMapTest.TrackReplace4" description="Deleting the line above should not affect the mark" executed="True" success="True" time="0.004" asserts="2" />
                </results>
              </test-suite>
              <test-suite name="Modes_ModeUtilTest" executed="True" success="True" time="0.293" asserts="0">
                <results>
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.GoToDefinition1" executed="True" success="True" time="0.096" asserts="1" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.GoToDefinition2" executed="True" success="True" time="0.012" asserts="2" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.GoToDefinition3" description="Make sure we don't crash when nothing is under the cursor" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.Join1" executed="True" success="True" time="0.007" asserts="4" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.Join2" description="Eat spaces at the start of the next line" executed="True" success="True" time="0.017" asserts="4" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.Join3" description="Join with a count" executed="True" success="True" time="0.014" asserts="4" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.Join4" description="Join with a single count, should be no different" executed="True" success="True" time="0.008" asserts="4" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.Join5" executed="True" success="True" time="0.010" asserts="3" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.Join6" executed="True" success="True" time="0.005" asserts="3" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.JumpToMark1" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.JumpToMark2" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.JumpToMark3" description="Global marks aren't supported yet" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.PasteAfter1" executed="True" success="True" time="0.003" asserts="3" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.PasteAfter2" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.PasteAfter3" executed="True" success="True" time="0.002" asserts="4" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.PasteAfter4" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.PasteAfter5" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.PasteAfter6" description="Character wise paste at the end of the line should go on that line" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.PasteBefore1" executed="True" success="True" time="0.002" asserts="2" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.SetMark1" executed="True" success="True" time="0.009" asserts="2" />
                  <test-case name="VimCoreTest.Modes_ModeUtilTest.SetMark2" description="Invalid mark character" executed="True" success="True" time="0.004" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="MotionCaptureTest" executed="True" success="True" time="0.118" asserts="0">
                <results>
                  <test-case name="VimCoreTest.MotionCaptureTest.AllWord1" executed="True" success="True" time="0.000" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.AllWord2" executed="True" success="True" time="0.001" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.AllWord3" executed="True" success="True" time="0.001" asserts="5" />
                  <test-case name="VimCoreTest.MotionCaptureTest.BadInput" executed="True" success="True" time="0.000" asserts="2" />
                  <test-case name="VimCoreTest.MotionCaptureTest.BadInput2" description="Keep gettnig input until it's escaped" executed="True" success="True" time="0.000" asserts="3" />
                  <test-case name="VimCoreTest.MotionCaptureTest.CharLeft1" executed="True" success="True" time="0.000" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.CharLeft2" description="Make sure that counts are multiplied" executed="True" success="True" time="0.001" asserts="3" />
                  <test-case name="VimCoreTest.MotionCaptureTest.CharRight1" executed="True" success="True" time="0.000" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.Count1" executed="True" success="True" time="0.000" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.Count2" description="Count of 1" executed="True" success="True" time="0.000" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.EndOfLine1" executed="True" success="True" time="0.000" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.EndOfLine2" executed="True" success="True" time="0.000" asserts="2" />
                  <test-case name="VimCoreTest.MotionCaptureTest.EndOfLineCount1" executed="True" success="True" time="0.001" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.EndOfLineCount2" executed="True" success="True" time="0.000" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.EndOfLineCount3" description="Make sure counts past the end of the buffer don't crash" executed="True" success="True" time="0.000" asserts="2" />
                  <test-case name="VimCoreTest.MotionCaptureTest.LineUp1" executed="True" success="True" time="0.000" asserts="3" />
                  <test-case name="VimCoreTest.MotionCaptureTest.StartOfLine1" executed="True" success="True" time="0.000" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.StartOfLine2" description="Make sure it goes to the first non-whitespace character" executed="True" success="True" time="0.000" asserts="4" />
                  <test-case name="VimCoreTest.MotionCaptureTest.Word1" executed="True" success="True" time="0.000" asserts="5" />
                  <test-case name="VimCoreTest.MotionCaptureTest.Word2" executed="True" success="True" time="0.001" asserts="3" />
                  <test-case name="VimCoreTest.MotionCaptureTest.Word3" description="Word motion with a count" executed="True" success="True" time="0.000" asserts="3" />
                  <test-case name="VimCoreTest.MotionCaptureTest.Word4" description="Count across lines" executed="True" success="True" time="0.000" asserts="3" />
                  <test-case name="VimCoreTest.MotionCaptureTest.Word5" description="Count off the end of the buffer" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.MotionCaptureTest.Word6" executed="True" success="True" time="0.000" asserts="3" />
                  <test-case name="VimCoreTest.MotionCaptureTest.Word7" executed="True" success="True" time="0.000" asserts="3" />
                </results>
              </test-suite>
              <test-suite name="MotionUtilTests" executed="True" success="True" time="0.099" asserts="0">
                <results>
                  <test-case name="VimCoreTest.MotionUtilTests.CharDown1" executed="True" success="True" time="0.009" asserts="2" />
                  <test-case name="VimCoreTest.MotionUtilTests.CharDown2" description="Don't go past the end of the buffer" executed="True" success="True" time="0.002" asserts="2" />
                  <test-case name="VimCoreTest.MotionUtilTests.CharLeft1" executed="True" success="True" time="0.001" asserts="3" />
                  <test-case name="VimCoreTest.MotionUtilTests.CharLeft2" description="Don't go off the end of the buffer" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.MotionUtilTests.CharRight1" executed="True" success="True" time="0.001" asserts="3" />
                  <test-case name="VimCoreTest.MotionUtilTests.CharRight2" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.MotionUtilTests.CharRight3" description="Don't go off the end of the buffer" executed="True" success="True" time="0.003" asserts="3" />
                  <test-case name="VimCoreTest.MotionUtilTests.CharUp1" executed="True" success="True" time="0.005" asserts="2" />
                  <test-case name="VimCoreTest.MotionUtilTests.CharUp2" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.MotionUtilTests.LineDown1" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.MotionUtilTests.LineUp1" executed="True" success="True" time="0.002" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="Normal_Operations" executed="True" success="False" time="0.001" asserts="0" />
              <test-suite name="NormalModeTest" executed="True" success="True" time="2.215" asserts="0">
                <results>
                  <test-case name="VimCoreTest.NormalModeTest.BadMotion1" description="Typing in invalid motion should produce a warning" executed="True" success="True" time="0.024" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.BadMotion2" description="Typing in invalid motion should produce a warning" executed="True" success="True" time="0.017" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.BadMotion3" description="Enter must cancel an invalid motion" executed="True" success="True" time="0.012" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.BadMotion4" description="Canceled motion should reset the status" executed="True" success="True" time="0.027" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.BadMotion5" description="Completed motion should reset the status" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.CanProcess1" description="Can process basic commands" executed="True" success="True" time="0.011" asserts="4" />
                  <test-case name="VimCoreTest.NormalModeTest.CanProcess2" description="Cannot process invalid commands" executed="True" success="True" time="0.005" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.CanProcess3" description="Must be able to process numbers" executed="True" success="True" time="0.007" asserts="8" />
                  <test-case name="VimCoreTest.NormalModeTest.CanProcess4" description="When in a need more state, process everything" executed="True" success="True" time="0.009" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.CharGCommand" executed="True" success="True" time="0.015" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Delete_dd_1" description="Make sure a dd is a linewise action" executed="True" success="True" time="0.012" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Delete_dd_2" description="Make sure that it deletes the entire line regardless of where the caret is" executed="True" success="True" time="0.010" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Delete_dw_1" executed="True" success="True" time="0.009" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Delete_dw_2" description="Delete at the end of the line shouldn't delete newline" executed="True" success="True" time="0.010" asserts="4" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_2x" executed="True" success="True" time="0.012" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_2X_1" executed="True" success="True" time="0.018" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_2X_2" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_o_1" executed="True" success="True" time="0.030" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_O_1" executed="True" success="True" time="0.023" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_o_2" description="Use o at end of buffer" executed="True" success="True" time="0.011" asserts="0" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_O_2" executed="True" success="True" time="0.009" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_o_3" description="Make sure o will indent if the previous line was indented" executed="True" success="True" time="0.009" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_1" executed="True" success="True" time="0.012" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_2" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_3" executed="True" success="True" time="0.011" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_4" executed="True" success="True" time="0.008" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_5" executed="True" success="True" time="0.011" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_6" description="block caret should be hidden for the duration of the r command" executed="True" success="True" time="0.011" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_r_7" description="Edit should not cause the cursor to move" executed="True" success="True" time="0.011" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_x_1" executed="True" success="True" time="0.024" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_X_1" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_x_2" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Edit_X_2" description="Don't delete past the current line" executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Enter1" description="Enter should move down on line" executed="True" success="True" time="0.014" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Enter2" description="Enter at end of file should beep " executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.EnterProcessing" description="Let enter go straight back to the editor in the default case" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.GoToDefinition1" executed="True" success="True" time="0.014" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.GoToDefinition2" description="When it fails, the status should be updated" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.GoToDefinition3" executed="True" success="True" time="0.030" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Join1" executed="True" success="True" time="0.011" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Join2" executed="True" success="True" time="0.009" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Join3" executed="True" success="True" time="0.023" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Join4" executed="True" success="True" time="0.019" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.JumpToMark1" executed="True" success="True" time="0.008" asserts="4" />
                  <test-case name="VimCoreTest.NormalModeTest.JumpToMark2" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Mark1" executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Mark2" description="Once we are in mark mode we can process anything" executed="True" success="True" time="0.011" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Mark3" executed="True" success="True" time="0.012" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Mark4" description="Bad mark should beep" executed="True" success="True" time="0.017" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ModeKindTest" executed="True" success="True" time="0.016" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Motion_2l" executed="True" success="True" time="0.013" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Motion_50l" description="Don't crash moving off the end of the buffer" executed="True" success="True" time="0.018" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Motion_l" executed="True" success="True" time="0.015" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_h" executed="True" success="True" time="0.012" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_h2" description="Make sure that we clear the selection on a motion" executed="True" success="True" time="0.083" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_j" executed="True" success="True" time="0.019" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_k" executed="True" success="True" time="0.020" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_l" executed="True" success="True" time="0.011" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Move_l2" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.NextWord1" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.NextWord2" description="No matches should have no effect" executed="True" success="True" time="0.019" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.NextWord3" executed="True" success="True" time="0.017" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.NextWord4" executed="True" success="True" time="0.009" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.NextWord5" description="Don't start on position 0" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.OnLeave1" description="OnLeave should kill the block caret" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_2p" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_2P" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_gp_1" executed="True" success="True" time="0.012" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_gP_1" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_gp_2" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_gP_2" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_gp_3" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_gP_3" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_p" executed="True" success="True" time="0.059" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_P" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_p_2" description="Paste from a non-default register" executed="True" success="True" time="0.009" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_p_3" description="Paste at end of buffer shouldn't crash" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_p_4" executed="True" success="True" time="0.012" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_p_5" description="Pasting a linewise motion should occur on the next line" executed="True" success="True" time="0.011" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Paste_p_6" description="Pasting a linewise motion should move the caret to the start of the next line" executed="True" success="True" time="0.021" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.PreviousWord1" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.PreviousWord2" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.PreviousWord3" executed="True" success="True" time="0.011" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.PreviousWord4" executed="True" success="True" time="0.015" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Register1" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Regression_DownPastBufferEnd" description="j past the end of the buffer" executed="True" success="True" time="0.011" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Regression_InsertMode" description="Don't re-enter insert mode on every keystroke once you've left" executed="True" success="True" time="0.012" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.ScrollDown1" executed="True" success="True" time="0.026" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ScrollUp1" executed="True" success="True" time="0.009" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ScrollUp2" description="Don't break at line 0" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Search1" executed="True" success="True" time="0.012" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Search2" executed="True" success="True" time="0.015" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Search3" description="Make sure it matches the first occurance" executed="True" success="True" time="0.013" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Search4" description="No match should select nothing" executed="True" success="True" time="0.006" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Search5" description="A partial match followed by a bad match should go back to start" executed="True" success="True" time="0.009" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Search6" description="Search accross lines" executed="True" success="True" time="0.013" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchBackspace1" executed="True" success="True" time="0.012" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchBackspace2" executed="True" success="True" time="0.010" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchBackspace3" description="Completely exit from the search" executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNext1" executed="True" success="True" time="0.032" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNext2" description="Don't start at current position" executed="True" success="True" time="0.017" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNext3" description="Don't skip the current word just the current letter" executed="True" success="True" time="0.015" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNext4" description="Counted next" executed="True" success="True" time="0.022" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNext5" description="Make sure enter sets the search" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchNextReverse1" executed="True" success="True" time="0.017" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchReverse1" executed="True" success="True" time="0.012" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchReverse2" description="Change nothing on invalid searh" executed="True" success="True" time="0.010" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchStatus1" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.SearchStatus2" executed="True" success="True" time="0.026" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftLeft1" description="Don't eat extra whitespace" executed="True" success="True" time="0.035" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftLeft2" executed="True" success="True" time="0.018" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftLeft3" executed="True" success="True" time="0.017" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftLeft4" description="With a count" executed="True" success="True" time="0.012" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftLeft5" description="Make sure a &lt;&lt; doesn't shift more than 1 line" executed="True" success="True" time="0.010" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftRight1" executed="True" success="True" time="0.018" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftRight2" description="With a count" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftRight3" description="With a motion" executed="True" success="True" time="0.015" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.ShiftRight4" description="Make sure a normal &gt;&gt; doesn't shift 2 lines" executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Undo1" executed="True" success="True" time="0.007" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Undo2" executed="True" success="True" time="0.009" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_2yw" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_3yw" executed="True" success="True" time="0.035" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_Y_1" executed="True" success="True" time="0.014" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_Y_2" executed="True" success="True" time="0.013" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_Y_3" executed="True" success="True" time="0.012" asserts="2" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_y2w" executed="True" success="True" time="0.011" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yaw" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yaw_2" executed="True" success="True" time="0.009" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yw" executed="True" success="True" time="0.015" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yw_2" description="Yanks in the middle of the word should only get a partial" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yw_3" description="Yank word should go to the start of the next word including spaces" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yw_4" description="Non-default register" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yy_1" description="A yy should grab the end of line including line break information" executed="True" success="True" time="0.007" asserts="3" />
                  <test-case name="VimCoreTest.NormalModeTest.Yank_yy_2" description="yy should yank the entire line even if the cursor is not at the start" executed="True" success="True" time="0.008" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="RangeUtilTest" executed="True" success="True" time="0.282" asserts="0">
                <results>
                  <test-case name="VimCoreTest.RangeUtilTest.ApplyCount1" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.RangeUtilTest.ApplyCount2" description="Count is bound to end of the file" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.RangeUtilTest.ApplyCount3" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.RangeUtilTest.CurrentLine1" executed="True" success="True" time="0.032" asserts="2" />
                  <test-case name="VimCoreTest.RangeUtilTest.CurrentLine2" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.RangeUtilTest.CurrentLine3" executed="True" success="True" time="0.003" asserts="3" />
                  <test-case name="VimCoreTest.RangeUtilTest.FullFile" executed="True" success="True" time="0.005" asserts="2" />
                  <test-case name="VimCoreTest.RangeUtilTest.FullFile2" executed="True" success="True" time="0.026" asserts="3" />
                  <test-case name="VimCoreTest.RangeUtilTest.LineNumber1" executed="True" success="True" time="0.002" asserts="2" />
                  <test-case name="VimCoreTest.RangeUtilTest.NoRange1" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.RangeUtilTest.RangeOrCurrentLine1" executed="True" success="True" time="0.005" asserts="2" />
                  <test-case name="VimCoreTest.RangeUtilTest.RangeOrCurrentLine2" executed="True" success="True" time="0.149" asserts="1" />
                  <test-case name="VimCoreTest.RangeUtilTest.SingleLine1" executed="True" success="True" time="0.003" asserts="2" />
                </results>
              </test-suite>
              <test-suite name="TextUtilTest" executed="True" success="True" time="0.081" asserts="0">
                <results>
                  <test-case name="VimCoreTest.TextUtilTest.FindBigWord1" executed="True" success="True" time="0.002" asserts="2" />
                  <test-case name="VimCoreTest.TextUtilTest.FindFullBigWord1" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.TextUtilTest.FindFullWord1" executed="True" success="True" time="0.002" asserts="4" />
                  <test-case name="VimCoreTest.TextUtilTest.FindFullWord2" executed="True" success="True" time="0.001" asserts="3" />
                  <test-case name="VimCoreTest.TextUtilTest.FindNextWord" description="Simple find next word" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.TextUtilTest.FindPreviousWordStart1" executed="True" success="True" time="0.011" asserts="2" />
                  <test-case name="VimCoreTest.TextUtilTest.FindPreviousWordStart2" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.TextUtilTest.FindPreviousWordStart3" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.TextUtilTest.FindPreviousWordStart4" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.TextUtilTest.FindPreviousWordStart5" executed="True" success="True" time="0.002" asserts="2" />
                  <test-case name="VimCoreTest.TextUtilTest.FindWord1" executed="True" success="True" time="0.002" asserts="2" />
                  <test-case name="VimCoreTest.TextUtilTest.FindWord2" executed="True" success="True" time="0.000" asserts="2" />
                  <test-case name="VimCoreTest.TextUtilTest.FindWord3" executed="True" success="True" time="0.000" asserts="3" />
                  <test-case name="VimCoreTest.TextUtilTest.FindWord4" executed="True" success="True" time="0.001" asserts="2" />
                  <test-case name="VimCoreTest.TextUtilTest.FindWord5" executed="True" success="True" time="0.001" asserts="2" />
                </results>
              </test-suite>
              <test-suite name="TextUtilTest2" executed="True" success="True" time="0.012" asserts="0">
                <results>
                  <test-case name="VimCoreTest.TextUtilTest2.FindNextWord1" executed="True" success="True" time="0.002" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="TssUtilTest" executed="True" success="True" time="0.420" asserts="0">
                <results>
                  <test-case name="VimCoreTest.TssUtilTest.FindCurrentWordSpan1" description="End of line should not have a current word" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindIndentPosition" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindIndentPosition2" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindNextWordPosition1" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindNextWordPosition2" description="Start of word should give bakc the current word" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindNextWordPosition3" description="Start on non-first line" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindNextWordPosition4" description="Start on non-first line with non-first word" executed="True" success="True" time="0.002" asserts="3" />
                  <test-case name="VimCoreTest.TssUtilTest.FindNextWordPosition5" description="Find word accross line boundary" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindNextWordPosition6" description="At end of buffer it should give back the last point" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindNextWordSpan1" description="Make sure we don't throw if we are in the Line break" executed="True" success="True" time="0.003" asserts="2" />
                  <test-case name="VimCoreTest.TssUtilTest.FindPreviousWordSpan1" executed="True" success="True" time="0.012" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindPreviousWordSpan2" description="in whitespace so go backwards" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindPreviousWordSpan3" description="Don't go back a word if we're in the middle of one" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindPreviousWordSpan4" description="Make sure to go back if we're at the start of a word" executed="True" success="True" time="0.002" asserts="2" />
                  <test-case name="VimCoreTest.TssUtilTest.FindPreviousWordSpan5" description="Make sure to go backwards across lines" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindPreviousWordSpan6" description="Don't crash when at the end of a line" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.FindPreviousWordSpan7" description="Back to front should return the start of the buffer" executed="True" success="True" time="0.004" asserts="2" />
                  <test-case name="VimCoreTest.TssUtilTest.GetCharacterSpan1" executed="True" success="True" time="0.006" asserts="2" />
                  <test-case name="VimCoreTest.TssUtilTest.GetCharacterSpan2" description="Empty line shtould have a character span of the entire line" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetCharacterSpan3" description="End of line should have the span of the line break" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetEndPoint" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetLineRangeSpan1" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetLineRangeSpan2" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetLineRangeSpanIncludingLineBreak1" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetLines1" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetLines2" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.TssUtilTest.GetLines3" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetLines4" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetLines5" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetLines6" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetLines7" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetNextPoint1" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetNextPoint2" description="End of line should wrap" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetNextPoint3" description="Don't around the buffer" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetNextPointWithWrap1" executed="True" success="True" time="0.003" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetNextPointWithWrap2" description="End of line should wrap" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetNextPointWithWrap3" description="Wrap around the buffer" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetPoints1" executed="True" success="True" time="0.020" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetPreviousPointWithWrap1" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetPreviousPointWithWrap2" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetPreviousPointWithWrap3" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetReverseCharacterSpan1" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetReverseCharacterSpan2" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetReverseCharacterSpan3" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetSpans1" executed="True" success="True" time="0.012" asserts="3" />
                  <test-case name="VimCoreTest.TssUtilTest.GetSpans2" executed="True" success="True" time="0.004" asserts="4" />
                  <test-case name="VimCoreTest.TssUtilTest.GetSpans3" description="Full lines starting at line not 0" executed="True" success="True" time="0.003" asserts="3" />
                  <test-case name="VimCoreTest.TssUtilTest.GetSpans4" description="Don't wrap if we say dont't wrap" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetSpans5" description="Don't wrap backwards if we don't say wrap" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetSpans6" description="Multi lack of wrap" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetSpans7" description="multi lack of wrap reverse" executed="True" success="True" time="0.001" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetSpans8" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetSpans9" description="Handle being given a point in the middle of a line break" executed="True" success="True" time="0.005" asserts="4" />
                  <test-case name="VimCoreTest.TssUtilTest.GetStartPoint" executed="True" success="True" time="0.002" asserts="1" />
                  <test-case name="VimCoreTest.TssUtilTest.GetValidLineNumberOrLast" executed="True" success="True" time="0.001" asserts="2" />
                  <test-case name="VimCoreTest.TssUtilTest.GetValidLineNumberOrLast2" executed="True" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="ViewUtilTest" executed="True" success="True" time="0.260" asserts="0">
                <results>
                  <test-case name="VimCoreTest.ViewUtilTest.FindCurrentFullWord1" executed="True" success="True" time="0.016" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.FindCurrentFullWord2" executed="True" success="True" time="0.004" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretDown1" description="Move caret down should fail if the caret is at the end of the buffer" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretDown2" description="Move caret down should not crash if the line is the second to last line.  In other words, the last real line" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretDown3" description="Move caret down should not crash if the line is the second to last line.  In other words, the last real line" executed="True" success="True" time="0.008" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretDown4" description="Be wary the 0 length last line" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretDown5" description="Move caret down should maintain column" executed="True" success="True" time="0.010" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretDown6" description="Move caret down should maintain column" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretLeft1" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretLeft2" description="Left at the start of the line should not go further" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretRight1" description="Don't crash going off the buffer" executed="True" success="True" time="0.006" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretRight2" description="Don't go off the end of the current line" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretUp1" description="Move caret up past the begining of the buffer should fail if it's already at the top" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveCaretUp2" description="Move caret up should respect column positions" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveToLine1" description="Move to the top of the file" executed="True" success="True" time="0.031" asserts="2" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveToLine2" description="Make sure the caret moves" executed="True" success="True" time="0.008" asserts="2" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveWordBackard3" description="Middle of word should move back to front" executed="True" success="True" time="0.011" asserts="2" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveWordBackward2" description="At the the start of a word move back to the start of the previous wodr" executed="True" success="True" time="0.015" asserts="2" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveWordBackward4" description="Move backwards across lines" executed="True" success="True" time="0.017" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveWordBackword1" executed="True" success="True" time="0.012" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveWordForward1" description="At end of line should wrap to the start of the next line if there is a word" executed="True" success="True" time="0.007" asserts="1" />
                  <test-case name="VimCoreTest.ViewUtilTest.MoveWordForward2" executed="True" success="True" time="0.008" asserts="1" />
                </results>
              </test-suite>
              <test-suite name="VimBufferTests" executed="True" success="True" time="0.536" asserts="0">
                <results>
                  <test-case name="VimCoreTest.VimBufferTests.Close1" description="Close should call OnLeave for the active mode" executed="True" success="True" time="0.098" asserts="1" />
                  <test-case name="VimCoreTest.VimBufferTests.Close2" description="Close should destroy the block caret" executed="True" success="True" time="0.005" asserts="1" />
                  <test-case name="VimCoreTest.VimBufferTests.KeyInputProcessed1" executed="True" success="True" time="0.407" asserts="1" />
                  <test-case name="VimCoreTest.VimBufferTests.SwitchedMode1" executed="True" success="True" time="0.011" asserts="1" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>